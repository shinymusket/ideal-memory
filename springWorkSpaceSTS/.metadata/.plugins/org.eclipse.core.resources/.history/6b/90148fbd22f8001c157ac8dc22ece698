package spring.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import spring.vo.Member;

public class MemberDao {
	
	private JdbcTemplate jdbcTemplate;
	
	// 생성자를 통해 주입
	public MemberDao(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
	
	// 이메일을 통한 멤버 조회
	public Member selectByEmail(String email) {
		String sql = "SELECT * FROM members WHERE email=?";
		
		// 각 레코드의 데이터를 읽어오는데 도움을 주는 클래스 : RowMapper(인터페이스)
// 1)예제 : RowMapper를 구현한 클래스를 활용한 방법
//		List<Member> list = jdbcTemplate.query(sql, new MapperSqlToMember(), email);
		
// 2)예제 : 익명 구현 객체
		List<Member> list = jdbcTemplate.query(sql, new RowMapper<Member>() {

			@Override
			public Member mapRow(ResultSet rs, int rowNum) throws SQLException {
				Member m = new Member(
						rs.getString("email"),
						rs.getString("password"),
						rs.getString("name"),
						rs.getTimestamp("regdate")
						);
				m.setId(rs.getLong("id"));
				return m;
			}
			
		}, email);
			
		return list.isEmpty()? null : list.get(0);
	}
	
	
	
	public List<Member> selectAll() {
		List<Member> list = jdbcTemplate.query(
				"SELECT * FROM members ORDER BY id ASC",
				new RowMapper<Member>() {

					@Override
					public Member mapRow(ResultSet rs, int rowNum) throws SQLException {
						Member m = new Member(
								rs.getString("email"),
								rs.getString("password"),
								rs.getString("name"),
								rs.getTimestamp("regdate")
								);
						m.setId(rs.getLong("id"));
						return m;
					}
				});
				
		return list;
	}
	
	// 하나의 컬럼만 조회하는 상황
	public int count() {
		String sql = "SELECT COUNT(*) FROM members";
		
		Integer cnt = jdbcTemplate.queryForObject(sql, Integer.class);
		
		return cnt;
	}
	
	
	public void insertMember(Member member) {
		String sql = "INSERT INTO members VALUES (MEMBERS_SEQ.nextval, ?, ?, ?, ?)";
		int num = jdbcTemplate.update(sql, 
					member.getEmail(),
					member.getPassword(),
					member.getName(),
					new Timestamp(member.getRegisterDate().getTime())
					);
//		 num 반영된 컬럼의 개수
		
		// ? 부분을 채우기 위한 기능을 직접 제어해야 하는 경우 => Key(시퀀스) 값 가져오기
//		KeyHolder keyholder = new GeneratedKeyHolder();
//		
//		jdbcTemplate.update(new PreparedStatementCreator() {
//			
//			@Override
//			public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
//				PreparedStatement psmt = con.prepareStatement(sql, new String[] {"id"});
//				
//				psmt.setString(1, member.getEmail());
//				psmt.setString(2, member.getPassword());
//				psmt.setString(3, member.getName());
//				psmt.setTimestamp(4, new Timestamp(member.getRegisterDate().getTime()));
//				
//				return psmt;
//			}
//		}, keyholder);
//		
//		Number KeyValue = keyholder.getKey();
//		member.setId(KeyValue.longValue());
		
		
		
		
		
		
		
		
		
		
	}
	
	public void updateMember(Member member) {
		String sql = "UPDATE members SET name=?, password=? WHERE email=?";
		int num = jdbcTemplate.update(sql,
					member.getName(),
					member.getPassword(),
					member.getEmail()
				);
		// num 반영된 컬럼의 개수
	}
	
	public void deleteMember(Member member) {
		String sql = "DELETE FROM members WHERE email=?";
		int num = jdbcTemplate.update(sql,
				);
		
	}
	
}
